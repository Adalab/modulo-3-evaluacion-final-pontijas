{"version":3,"sources":["images/logo.png","components/Character.js","components/CharacterList.js","components/Filter.js","components/Modal.js","services/getDataFromApi.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Character","props","to","character","id","className","src","image","alt","name","title","species","CharacterList","charactersInfo","characters","map","key","Filter","type","placeholder","onChange","ev","handleFilter","value","target","Modal","console","log","getDataFromApi","fetch","then","response","json","data","results","origin","status","episodes","episode","length","App","useState","setCharacters","nameFilter","setNameFilter","useEffect","filteredCharacters","filter","toUpperCase","includes","logo","path","render","matchId","match","params","matchCharacter","find","parseInt","href","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e61c20ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.75509f2e.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/App.scss';\n\nconst Character = (props) => {\n  // console.log('recibo esto en caracter', props.character.id);\n\n  return (\n    <Link to={`/character/${props.character.id}`} className=\"card__link\">\n      <section className=\"card__container\">\n        <img src={props.character.image} alt={`Imagen de ${props.character.name}`} title={`Imagen de ${props.character.name}`} className=\"card__img\"></img>\n        <section className=\"card__info\">\n          <h4>{props.character.name}</h4>\n          <p>{props.character.species}</p>\n        </section>\n      </section>\n    </Link>\n  );\n};\n\nexport default Character;\n","import React from 'react';\nimport Character from './Character';\nimport '../stylesheets/App.scss';\n\nconst CharacterList = (props) => {\n  const charactersInfo = props.characters.map((character) => {\n    return (\n      <li key={character.id} className=\"list__item\">\n        <Character character={character} />\n      </li>\n    );\n  });\n\n  return (\n    <div>\n      <ul className=\"list__container\">{charactersInfo}</ul>\n    </div>\n  );\n};\n\nexport default CharacterList;\n","import React from 'react';\r\nimport '../stylesheets/App.scss';\r\n\r\nconst Filter = (props) => {\r\n  // console.log('recibo esto en filter', props.handleFilter);\r\n  const handleChange = (ev) => {\r\n    // console.log(ev.type, ev.target.value);\r\n    props.handleFilter({\r\n      value: ev.target.value,\r\n      key: 'name',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form className=\"filter__container\">\r\n      <label className=\"filter__label\">Filter by name</label>\r\n      <input type=\"text\" className=\"filter__input\" placeholder=\"Character name\" onChange={handleChange}></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../stylesheets/App.scss';\r\n\r\nconst Modal = (props) => {\r\n  console.log('recibo esto en Modal', props.character);\r\n\r\n  return (\r\n    <div className=\"modal__container\">\r\n      <div className=\"modal__header\">\r\n        <h2 className=\"modal__title\">Name</h2>\r\n        <Link to=\"/\" className=\"modal__link\">\r\n          Go Back\r\n        </Link>\r\n      </div>\r\n      <section className=\"modal__info\">\r\n        <img src=\"https://via.placeholder.com/200\" alt=\"Character\" title=\"Character image\" />\r\n        <ul>\r\n          <li className=\"modal__list-item\">specie: </li>\r\n          <li className=\"modal__list-item\">origin: </li>\r\n          <li className=\"modal__list-item\">status: </li>\r\n          <li className=\"modal__list-item\">episodes: </li>\r\n        </ul>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","const getDataFromApi = () => {\r\n  return fetch('https://rickandmortyapi.com/api/character')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log('data', data);\r\n\r\n      return data.results.map((character) => {\r\n        return {\r\n          id: character.id,\r\n          name: character.name,\r\n          image: character.image,\r\n          species: character.species,\r\n          origin: character.origin.name,\r\n          status: character.status,\r\n          episodes: character.episode.length,\r\n        };\r\n      });\r\n    });\r\n};\r\n\r\nexport default getDataFromApi;\r\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport CharacterList from './CharacterList';\nimport Filter from './Filter';\nimport Modal from './Modal';\nimport getDataFromApi from '../services/getDataFromApi';\nimport logo from '../images/logo.png';\nimport '../stylesheets/App.scss';\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [nameFilter, setNameFilter] = useState('');\n\n  useEffect(() => {\n    getDataFromApi().then((data) => setCharacters(data));\n  }, []);\n\n  const handleFilter = (data) => {\n    setNameFilter(data.value);\n  };\n\n  const filteredCharacters = characters.filter((character) => {\n    // boolean\n    // console.log(character.name.toUpperCase().includes(nameFilter.toUpperCase()));\n    return character.name.toUpperCase().includes(nameFilter.toUpperCase());\n  });\n\n  const renderModal = (props) => {\n    const matchId = props.match.params.id;\n\n    // console.log('holi match', props.match.params.id);\n    // console.log('holi array', characters);\n\n    const matchCharacter = characters.find((character) => {\n      // console.log(charactersElement.id);\n      return character.id === parseInt(matchId);\n    });\n    // console.log('es un match', matchCharacter);\n    return <Modal character={matchCharacter} />;\n  };\n\n  return (\n    <div className=\"App__container\">\n      <header className=\"header__container\" id=\"header\">\n        <img src={logo} title=\"Rick y Morty\" alt=\"Rick y Morty\" className=\"header__logo\"></img>\n      </header>\n      <main className=\"main__container\">\n        <Filter handleFilter={handleFilter} />\n        <CharacterList characters={filteredCharacters} />\n        <Switch>\n          <Route path=\"/character/:id\" render={renderModal} />\n        </Switch>\n      </main>\n      <footer className=\"footer__container\">\n        <a className=\"footer__btn\" href=\"#header\">\n          go to top\n        </a>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}